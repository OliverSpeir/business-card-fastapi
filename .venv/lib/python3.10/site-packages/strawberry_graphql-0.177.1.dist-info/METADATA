Metadata-Version: 2.1
Name: strawberry-graphql
Version: 0.177.1
Summary: A library for creating GraphQL APIs
Home-page: https://strawberry.rocks/
License: MIT
Keywords: graphql,api,rest,starlette,async
Author: Patrick Arminio
Author-email: patrick.arminio@gmail.com
Requires-Python: >=3.7,<4.0
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Provides-Extra: aiohttp
Provides-Extra: asgi
Provides-Extra: chalice
Provides-Extra: channels
Provides-Extra: cli
Provides-Extra: debug
Provides-Extra: debug-server
Provides-Extra: django
Provides-Extra: fastapi
Provides-Extra: flask
Provides-Extra: opentelemetry
Provides-Extra: pydantic
Provides-Extra: pyinstrument
Provides-Extra: sanic
Provides-Extra: starlite
Requires-Dist: Django (>=3.2) ; extra == "django"
Requires-Dist: aiohttp (>=3.7.4.post0,<4.0.0) ; extra == "aiohttp"
Requires-Dist: asgiref (>=3.2,<4.0) ; extra == "django" or extra == "channels"
Requires-Dist: astunparse (>=1.6.3,<2.0.0) ; python_version < "3.9"
Requires-Dist: backports.cached-property (>=1.0.2,<2.0.0) ; python_version < "3.8"
Requires-Dist: chalice (>=1.22,<2.0) ; extra == "chalice"
Requires-Dist: channels (>=3.0.5) ; extra == "channels"
Requires-Dist: click (>=7.0,<9.0) ; extra == "debug-server" or extra == "cli"
Requires-Dist: fastapi (>=0.65.2) ; extra == "fastapi"
Requires-Dist: flask (>=1.1) ; extra == "flask"
Requires-Dist: graphql-core (>=3.2.0,<3.3.0)
Requires-Dist: libcst (>=0.4.7) ; extra == "debug" or extra == "debug-server" or extra == "cli"
Requires-Dist: opentelemetry-api (<2) ; extra == "opentelemetry"
Requires-Dist: opentelemetry-sdk (<2) ; extra == "opentelemetry"
Requires-Dist: pydantic (<2) ; extra == "pydantic"
Requires-Dist: pygments (>=2.3,<3.0) ; extra == "debug-server" or extra == "cli"
Requires-Dist: pyinstrument (>=4.0.0) ; extra == "pyinstrument"
Requires-Dist: python-dateutil (>=2.7.0,<3.0.0)
Requires-Dist: python-multipart (>=0.0.5,<0.0.7) ; extra == "asgi" or extra == "debug-server" or extra == "fastapi"
Requires-Dist: rich (>=12.0.0) ; extra == "debug" or extra == "debug-server" or extra == "cli"
Requires-Dist: sanic (>=20.12.2) ; extra == "sanic"
Requires-Dist: starlette (>=0.18.0) ; extra == "asgi" or extra == "debug-server"
Requires-Dist: starlite (>=1.48.0) ; (python_version >= "3.8") and (extra == "starlite")
Requires-Dist: typing_extensions (>=4.0.0,<5.0.0)
Requires-Dist: uvicorn (>=0.11.6,<0.22.0) ; extra == "debug-server"
Project-URL: Changelog, https://strawberry.rocks/changelog
Project-URL: Documentation, https://strawberry.rocks/
Project-URL: Discord, https://discord.com/invite/3uQ2PaY
Project-URL: Mastodon, https://farbun.social/@strawberry
Project-URL: Repository, https://github.com/strawberry-graphql/strawberry
Project-URL: Sponsor on GitHub, https://github.com/sponsors/strawberry-graphql
Project-URL: Sponsor on Open Collective, https://opencollective.com/strawberry-graphql
Project-URL: Twitter, https://twitter.com/strawberry_gql
Description-Content-Type: text/markdown

<img src="https://github.com/strawberry-graphql/strawberry/raw/main/.github/logo.png" width="124" height="150">

# Strawberry GraphQL

> Python GraphQL library based on dataclasses

[![CircleCI](https://img.shields.io/circleci/token/307b40d5e152e074d34f84d30d226376a15667d5/project/github/strawberry-graphql/strawberry/main.svg?style=for-the-badge)](https://circleci.com/gh/strawberry-graphql/strawberry/tree/main)
[![Discord](https://img.shields.io/discord/689806334337482765?label=discord&logo=discord&logoColor=white&style=for-the-badge&color=blue)](https://discord.gg/ZkRTEJQ)
[![PyPI](https://img.shields.io/pypi/v/strawberry-graphql?logo=pypi&logoColor=white&style=for-the-badge)](https://pypi.org/project/strawberry-graphql/)

## Installation ( Quick Start )

The quick start method provides a server and CLI to get going quickly. Install
with:

```shell
pip install "strawberry-graphql[debug-server]"
```

## Getting Started

Create a file called `app.py` with the following code:

```python
import strawberry


@strawberry.type
class User:
    name: str
    age: int


@strawberry.type
class Query:
    @strawberry.field
    def user(self) -> User:
        return User(name="Patrick", age=100)


schema = strawberry.Schema(query=Query)
```

This will create a GraphQL schema defining a `User` type and a single query
field `user` that will return a hardcoded user.

To run the debug server run the following command:

```shell
strawberry server app
```

Open the debug server by clicking on the following link:
[http://0.0.0.0:8000/graphql](http://0.0.0.0:8000/graphql)

This will open GraphiQL where you can test the API.

### Type-checking

Strawberry comes with a [mypy] plugin that enables statically type-checking your
GraphQL schema. To enable it, add the following lines to your `mypy.ini`
configuration:

```ini
[mypy]
plugins = strawberry.ext.mypy_plugin
```

[mypy]: http://www.mypy-lang.org/

### Django Integration

A Django view is provided for adding a GraphQL endpoint to your application.

1. Add the app to your `INSTALLED_APPS`.

```python
INSTALLED_APPS = [
    ...,  # your other apps
    "strawberry.django",
]
```

2. Add the view to your `urls.py` file.

```python
from strawberry.django.views import GraphQLView
from .schema import schema

urlpatterns = [
    ...,
    path("graphql", GraphQLView.as_view(schema=schema)),
]
```

## WebSockets

To support graphql Subscriptions over WebSockets you need to provide a WebSocket
enabled server. The debug server can be made to support WebSockets with these
commands:

```shell
pip install 'strawberry-graphql[debug-server]'
pip install 'uvicorn[standard]'
```

## Examples

* [Various examples on how to use Strawberry](https://github.com/strawberry-graphql/examples)
* [Full stack example using Starlette, SQLAlchemy, Typescript codegen and Next.js](https://github.com/jokull/python-ts-graphql-demo)
* [Quart + Strawberry tutorial](https://github.com/rockyburt/Ketchup)

## Contributing

We use [poetry](https://github.com/sdispater/poetry) to manage dependencies, to
get started follow these steps:

```shell
git clone https://github.com/strawberry-graphql/strawberry
cd strawberry
poetry install
poetry run pytest
```

This will install all the dependencies (including dev ones) and run the tests.

### Pre commit

We have a configuration for
[pre-commit](https://github.com/pre-commit/pre-commit), to add the hook run the
following command:

```shell
pre-commit install
```

## Links

- Project homepage: https://strawberry.rocks
- Repository: https://github.com/strawberry-graphql/strawberry
- Issue tracker: https://github.com/strawberry-graphql/strawberry/issues
  - In case of sensitive bugs like security vulnerabilities, please contact
    patrick.arminio@gmail.com directly instead of using the issue tracker. We
    value your effort to improve the security and privacy of this project!

## Licensing

The code in this project is licensed under MIT license. See [LICENSE](./LICENSE)
for more information.

![Recent Activity](https://images.repography.com/0/strawberry-graphql/strawberry/recent-activity/d751713988987e9331980363e24189ce.svg)

